[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = ""
description = ""
readme = "README.md"
license = {text = ""}
requires-python = ">=3.10"
version = "1.1.0"

authors = [
    {name = ""}
]
maintainers = [
    {name = ""}
]

dependencies = [
]

[tool.setuptools.packages.find]
where = ["."]
include = ["project_name*"]

[project.scripts]
odb_tools = "project_tools.runner:main"

[project.urls]
"Source" = ""
"Bug Reports" = ""


[project.optional-dependencies]
dev = [
]

[tool.ruff]
target-version = "py310"

[tool.ruff.lint]
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  "tests",
  "docs",
  "__pycache__",
]
ignore = [
  "E501", # pycodestyle line too long, handled by black
  "D100", # pydocstyle - missing docstring in public module
  "D101", # pydocstyle - missing docstring in public class
  "D102", # pydocstyle - missing docstring in public method
  "D103", # pydocstyle - missing docstring in public function
  "D104", # pydocstyle - missing docstring in public package
  "D105", # pydocstyle - missing docstring in magic method
  "D106", # pydocstyle - missing docstring in public nested class
  "D107", # pydocstyle - missing docstring in __init__
  "D202", # pydocstyle - no blank lines allowed after function docstring
  "D205", # pydocstyle - 1 blank line required between summary line and description
  "D415", # pydocstyle - first line should end with a period, question mark, or exclamation point
  "UP037", # pyupgrade - removes quotes from type annotation
  "A003", # flake8-builtins - class attribute {name} is shadowing a python builtin
  "B010", # flake8-bugbear - do not call setattr with a constant attribute value
  "B008", # flake8-bugbear - Do not perform function call `Parameter` in argument defaults
  "BLE001", # Ruff - Do not catch blind exception
  "S608", # Ruff - Possible SQL injection
  "S603", # Ruff - `subprocess` call: check for execution of untrusted input
  "S101", # Ruff - Use of `assert` detected
  "S314", # Ruff - Using `xml` to parse untrusted data is known to be vulnerable to XML attacks; use `defusedxml` equivalents
  "S320", # Ruff - Same as above
  "ANN101", # flake8-annotations - Missing type annotation for Self
  "UP031", # pyupgrade - Checks for printf-style string formatting, and offers to replace it with str.format calls.
]
select = [
  "A", # flake8-builtins
  "B", # flake8-bugbear
  "BLE", # flake8-blind-except
  "C4", # flake8-comprehensions
  "C90", # mccabe
  "D", # pydocstyle
  "DJ", # flake8-django
  "DTZ", # flake8-datetimez
  "E", # pycodestyle errors
  "ERA", # eradicate
  "EXE", # flake8-executable
  "F", # pyflakes
  "G", # flake8-logging-format
  "I", # isort
  "ICN", # flake8-import-conventions
  "ISC", # flake8-implicit-str-concat
  "N", # pep8-naming
  "PIE", # flake8-pie
  "PLC", # pylint - convention
  "PLE", # pylint - error
  "PLW", # pylint - warning
  "PTH", # flake8-use-pathlib
  "Q", # flake8-quotes
  "RET", # flake8-return
  "RUF", # Ruff-specific rules
  "S", # flake8-bandit
  "SIM", # flake8-simplify
  "T10", # flake8-debugger
  "TCH", # flake8-type-checking
  "TID", # flake8-tidy-imports
  "UP", # pyupgrade
  "W", # pycodestyle - warning
  "YTT", # flake8-2020
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod"]

[tool.ruff.lint.pydocstyle]
convention = "google"
