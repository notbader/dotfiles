{
    // Looks
    "editor.fontFamily": "Monaspace Neon Var, Fira Code, Monaco, monospace",
    "editor.fontSize": 13,
    "editor.fontLigatures": true,
    "workbench.colorTheme": "Nord Deep",
    // Terminal and Git stuff
    "terminal.integrated.fontFamily": "FiraMono Nerd Font",
    "terminal.integrated.defaultProfile.windows": "Git Bash",
    "terminal.integrated.cursorStyle": "line",
    "terminal.integrated.scrollback": 10000,
    "terminal.integrated.tabs.enabled": false,
    "terminal.integrated.fontSize": 13,
    "diffEditor.ignoreTrimWhitespace": false,
    // Zen mode stuff
    "zenMode.hideStatusBar": false,
    "zenMode.hideLineNumbers": false,
    "zenMode.restore": true,
    "zenMode.centerLayout": true,
    // Workspace and color stuff
    "window.commandCenter": false,
    "workbench.layoutControl.enabled": false,
    "workbench.editor.editorActionsLocation": "hidden",
    // Make minimal
    "workbench.activityBar.location": "top",
    "editor.scrollbar.vertical": "hidden",
    "editor.scrollbar.horizontal": "hidden",
    "editor.smoothScrolling": true,
    "editor.renderLineHighlight": "none",
    "symbols.hidesExplorerArrows": true,
    "editor.overviewRulerBorder": false,
    // Minimap
    "editor.minimap.enabled": false,
    "editor.minimap.renderCharacters": false,
    "editor.minimap.size": "fill",
    "editor.minimap.showSlider": "always",
    "editor.minimap.maxColumn": 100,
    // Formatting stuff
    "editor.unicodeHighlight.ambiguousCharacters": false,
    "editor.bracketPairColorization.enabled": true,
    "editor.insertSpaces": true,
    "editor.renderWhitespace": "none",
    "editor.renderControlCharacters": true,
    "editor.formatOnType": false,
    "editor.formatOnPaste": true,
    "editor.formatOnSave": true,
    "editor.wordWrap": "wordWrapColumn",
    "editor.wordWrapColumn": 120,
    "editor.tabSize": 4,
    "editor.rulers": [
        120
    ],
    "files.insertFinalNewline": true,
    "files.trimTrailingWhitespace": true,
    "files.trimFinalNewlines": true,
    "files.autoGuessEncoding": true,
    //Suggestions
    "editor.inlineSuggest.enabled": true,
    "editor.quickSuggestions": {
        "other": "off"
    },
    // QoL
    "editor.hover.delay": 500,
    "editor.semanticHighlighting.enabled": true,
    "editor.matchBrackets": "never",
    "editor.selectionHighlight": false,
    "files.autoSave": "afterDelay",
    "files.autoSaveDelay": 100,
    "workbench.startupEditor": "none",
    "security.workspace.trust.untrustedFiles": "open",
    // Python stuff
    "ruff.configuration": "./pyproject.toml",
    "ruff.lint.enable": true,
    "ruff.lint.run": "onSave",
    "[python]": {
        "editor.formatOnSave": true,
        "editor.defaultFormatter": "charliermarsh.ruff",
        "editor.insertSpaces": true,
        "editor.tabSize": 4,
        "editor.codeActionsOnSave": {
            "source.fixAll": "explicit",
            "source.organizeImports": "explicit",
            "source.formatDocument": "explicit"
        }
    },
    "python.languageServer": "Pylance",
    "python.analysis.typeCheckingMode": "strict",
    "python.analysis.importFormat": "absolute",
    "python.analysis.stubPath": "typings",
    "python.analysis.diagnosticSeverityOverrides": {
        "reportMissingImports": "error",
        "reportMissingModuleSource": "error",
        "reportMissingTypeStubs": "none",
        "reportGeneralTypeIssues": "error",
        "reportUnknownVariableType": "none", // Disables warnings for variables with partially unknown types
        "reportUnknownMemberType": "none", // Disables warnings for members with partially unknown types
        "reportUnknownArgumentType": "none",
        "reportUnknownParameterType": "none",
        "reportPartialTypeErrors": "none", // Specifically disables partial unknown type warnings
        "reportUnknownLambdaType": "none"
    },
    "python.analysis.extraPaths": [
        ".//pyrightconfig.json",
        "C:\\Users\\Bader.AlMal\\OneDrive - ESA\\Desktop\\stuff\\02_odb_tools"
    ],
    "python.analysis.useLibraryCodeForTypes": true,
    "python.analysis.autoSearchPaths": true,
    // Vim stuff
    "vim.easymotion": true,
    "vim.incsearch": true,
    "vim.useSystemClipboard": true,
    "vim.useCtrlKeys": true,
    "vim.hlsearch": true,
    "vim.leader": "<space>",
    "vim.statusBarColorControl": true,
    "vim.statusBarColors.normal": [
        "#8FBCBB",
        "#434C5E"
    ],
    "vim.statusBarColors.insert": [
        "#f08080",
        "#ffffff"
    ],
    "vim.highlightedyank.color": "#C34043",
    "vim.handleKeys": {
        "<C-o>": false,
        "<C-f>": false,
        "<C-b>": false,
        "<C-w>": false,
        "<C-a>": false,
        "<C-[>": false,
        "<C-]>": false,
        "<C-y>": false,
        "<C-v>": false,
        "<C-c>": false,
        "<C-x>": false,
        "<C-n>": false,
        "<ESC>": false,
        "<C-d>": true,
        "<C-u>": false
    },
    "editor.cursorSurroundingLines": 8,
    "vim.insertModeKeyBindings": [
        {
            // Pressing j twice ("before": ["j", "j"]) simulates the Esc key ("after": ["<Esc>"]).
            "before": [
                "j",
                "j"
            ],
            "after": [
                "<Esc>"
            ]
        }
    ],
    "vim.normalModeKeyBindingsNonRecursive": [
        {
            "before": [
                "u"
            ],
            "after": [],
            "commands": [
                {
                    "command": "undo",
                    "args": []
                }
            ]
        },
        {
            "before": [
                "<C-r>"
            ],
            "after": [],
            "commands": [
                {
                    "command": "redo",
                    "args": []
                }
            ]
        },
        {
            "before": [
                "<Leader>",
                "l"
            ],
            "after": [
                "$"
            ]
        },
        {
            "before": [
                "<Leader>",
                "d"
            ],
            "after": [
                "^"
            ]
        },
        {
            "before": [
                "J"
            ],
            "after": [
                "5",
                "j"
            ]
        },
        {
            "before": [
                "K"
            ],
            "after": [
                "5",
                "k"
            ]
        },
        {
            // Pressing ctrl+n clears search highlighting
            "before": [
                "<C-n>"
            ],
            "commands": [
                ":nohl"
            ]
        },
        {
            "before": [
                "t",
                "l"
            ],
            "commands": [
                "workbench.action.nextEditor"
            ],
            "silent": true
        },
        {
            "before": [
                "t",
                "h"
            ],
            "commands": [
                "workbench.action.previousEditor"
            ],
            "silent": true
        },
        {
            // Pressing the leader key (Spacebar) followed by w splits the editor.
            "before": [
                "<leader>",
                "w"
            ],
            "commands": [
                "workbench.action.splitEditor"
            ]
        },
        {
            // Pressing the leader key (Spacebar) followed by c comments the current line.
            "before": [
                "<leader>",
                "c"
            ],
            "commands": [
                "editor.action.commentLine"
            ]
        },
        {
            // Pressing the leader key (Spacebar) followed by o, g shows all symbols in the workspace.
            "before": [
                "<leader>",
                "o",
                "g"
            ],
            "commands": [
                "workbench.action.showAllSymbols"
            ]
        },
        {
            // Pressing the leader key (Spacebar) followed by o, o shows all open editors in the active group.
            "before": [
                "<leader>",
                "o",
                "o"
            ],
            "commands": [
                "workbench.action.showEditorsInActiveGroup"
            ]
        },
        {
            // Pressing the leader key (Spacebar) followed by o, p opens the quick open panel.
            "before": [
                "leader",
                "o",
                "p"
            ],
            "commands": [
                "workbench.action.quickOpen"
            ]
        }
    ],
    "vim.visualModeKeyBindings": [
        {
            "before": [
                "leader",
                "c"
            ],
            "commands": [
                "editor.action.commentLine",
                "extension.vim_escape"
            ]
        }
    ],
    "workbench.colorCustomizations": {
        "statusBar.background": "#8FBCBB",
        "statusBar.noFolderBackground": "#8FBCBB",
        "statusBar.debuggingBackground": "#8FBCBB",
        "statusBar.foreground": "#434C5E",
        "statusBar.debuggingForeground": "#434C5E"
    },
    "vim.vimrc.enable": true,
    "vim.vimrc.path": "~\\.vsrc",
}
